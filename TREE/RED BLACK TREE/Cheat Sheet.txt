	Red-Black Tree:- Self-Balancing BST(Color Scheme)
	
	Properties:-
	1) Root is always black.
	2) No two adjacent red nodes.	
	3) Every path from root to a NULL node has same number of black nodes.
	
	Why Red-Black Trees? :- 
	
	- Most of the BST operations (e.g., search, max, min, insert, delete.. etc) take O(h) time where h is the height of the BST. 
	- The cost of these operations may become O(n) for a skewed Binary tree.
	- If we make sure that height of the tree remains O(Logn) after every insertion and deletion.
	- Then we can guarantee an upper bound of O(Logn) for all these operations
	
	Comparison with AVL Tree
	
	- The AVL trees are more balanced compared to Red Black Trees, but they may cause more rotations during insertion and deletion. 
	- So if your application involves many frequent insertions and deletions, then Red Black trees should be preferred.
	- And if the insertions and deletions are less frequent and search is more frequent operation, then AVL tree should be preferred over Red Black Tree.
	
	Red-Black Tree Implementation:
	
	- If empty tree, Insert black node
	- Insert new leaf node as red
	   a). If parent is black then done
	   b). If parent is red
	       - if sibling is black or absent rotate and recolor
	       - if sibling is red recolor & check