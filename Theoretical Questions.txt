1). When to use a linked list over an array & Vice-versa ?

	# When to use linked list
	- you need constant-time insertions/deletions from the list 
	- you don't know how many items will be in the list
	- you don't need random access to any elements
	- you need to arrange object of different types(void pointer LL)

	- Practical Example: Message Queue

	# When to use Array
	- you need indexed/random access to elements
	- memory is a concern
	- When you know memory of same data type

2). What's the difference between passing by reference vs. passing by value?

	Best explanation I ever heard of this.

	Say I want to share a web page with you.

	- If I tell you the URL, I'm passing by reference. You can use that URL to see the same web page I can see. If that page is changed, we both see the changes. 
	- If you delete the URL, all you're doing is destroying your reference to that page - you're not deleting the actual page itself.

	- If I print out the page and give you the printout, I'm passing by value. Your page is a disconnected copy of the original. You won't see any subsequent changes,
	- and any changes that you make will not show up on the original page. 
	- If you destroy the printout, you have actually destroyed your copy of the object - but the original web page remains intact.

3). Advantages of BST over Hash Table


     	- Inorder Traversal of BST produce sorted data. This is not a natural operation in Hash Tables and requires extra efforts.
	- Finding closest minimum and maximum elements
	- Doing range queries are easy to do with BSTs. 
    	- With BSTs, all operations are guaranteed to work in O(Logn) time. But with Hashing, T(1) is average time and some particular operations may be costly, especially when table is large

4). When does the worst case of Quicksort occur?

	The answer depends on strategy for choosing pivot. If leftmost (or rightmost) element is chosen as pivot, the worst occurs in following cases.

	- Array is already sorted in same order.
	- Array is already sorted in reverse order.
	- All elements are same (special case of case 1 and 2)

	Solution :- 

	- Problem was easily solved by choosing either a random index OR middle index of the partition or (especially for longer partitions) 
	- Choosing the median as the pivot can reduce the chances of worst case of Quick sort.
	- But worst case can still occur if the input array is such that the maximum (or minimum) element is always chosen as pivot. 