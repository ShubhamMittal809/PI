1). Pointers:

    int main
    {
       int *i;
       *i = 10;
    }

The above code declares an integer pointer without being assigned an address. This means the variable "i" will contain a garbage value. "*i = 10" means we are putting the value "10" at the garbage address which might be or might not be in the process address space thus giving you a segmentation fault. The beauty of this bug is that it's won't always give you a segmentation fault because if you're lucky the garbage value might be an memory which belongs to your address space.


2). Array and Strings

    int main()
    {
       char *array="hello, world";
       array[0]='A';
    }

The above program declares an array with content "hello, world". Next, we replace the 1st character with letter 'A'. Seem to work, but wait, there's a catch. String literals are always declared in the read only section of the executable. You can always "objdump" the C executable and see you yourself. The memory for above "array" variable will be declared in the Read-Only section. Thus the above code again gives you a segmentation fault every time it is executed.

3). Ask them to explain the "signal" API call.
     Excerpt from the C manual:

    void (*signal(int sig, void (*func)(int)))(int);
         or in the equivalent but easier to read typedef'd version:
    typedef void (*sig_t) (int);
    sig_t signal(int sig, sig_t func);

5.). Short circuiting.

    1 int main()
      2 {
      3   int i = 0;
      4   int j = 0;
      5   if ( j && ++i)
      6     ;
      8   }

Value of i & j will be "0" by the end of the program. "i" won't be incremented because the if condition will be evaluated to be false when it evaluates "j". The compiler won't bother evaluating "++i" because the "if" condition is false irrespective of the value of "i"
