
0 Maximum Sum Subarray:-

	1). Brute Force O(NxNxN) (3 Loop(or 2 Loop), subArraySize Loop, Array traverse loop, sum of sub array loop)
	2). Divide & conquer ( Modified Quick Sort, while traversing reverse(for left sub array) & forward(for right sub array))
	3). Kadane's Algo (Assumption: Atleast one positive number, Logic :- sum up elements, record max of all positive sum

1 Find Sum Pair Array:- Use Hash Map, Store difference

2 Sort elements by frequency C++ STL

	- Count Frequency using hash table
	- Pair it & create vector table
	- Sort vector table
	- Rearrange all elements according to its frequency in original list

3 Segregate 0s and 1s in an array:-	use two index

	while left < right
		a) if( A[start] == 0 ), increament start index
		b) else if( A[end] == 1 ), decreament end index
		c) else swap

4 Segregate 0s, 1s and 2s in an array :- 	use three index

	while mid <= right
		a) if( A[mid] == 0 ), swap start & mid, increament start & mid index
		b) else if( A[mid] == 1 ), increament mid index
		c) else if( A[mid] == 2 ), swap end & mid, decreament end index

5 First & Last & Count of Occurence of Element in sorted Array :- Modified Binary Search

6 Find subarray with given sum :- 

	- Keeps Adding elements till total is less than sum
	- If total is greater than sum, start removing element from back untill total become less than given sum
	- Every time check for total = sum 

7 Sort elements by frequency C++ STL:- Use vector of pair & hash map

	- Count Frequency using hash table
	- Pair it & create vector table
	- Sort vector table
	- Rearrange all elements according to its frequency in original list

8 Kth Largest (Or Smallest) Element in Array:- Partition logic of quick sort

9 Find the max in  first increasing and then decreasing array:- Modified Binary Search

	i) If the mid element is greater than both of its adjacent elements, then mid is the maximum.
	ii) If mid element is greater than its next element and smaller than the previous element then max lies on left side of mid
	iii) If mid element is smaller than its next element and greater than the previous element then max lies on right side of mid

10 Find how many times sorted array rotated :- Modified Binary Search ( Use Property of pivoted element (prev & next both are greater than pivot))

11 Find Element in Sorted Rotated Array:- 

	- If A[mid] == Element
	- If A[end] >= A[mid] 
		a). If Element lie in between mid & end, start = mid + 1
		b). else end = mid - 1
	- If A[mid] <= A[start]
		a). IF Element lie in between mid & start, end = mid - 1
		b). else start = mid + 1
		
12 Trapping Rain Water :-
	- Pre-compute highest bar on left and right of every bar in O(n) time. Then use pre-computed values to find the amount of water in every element. 
	- Time complexity of this solution is O(n).

12 Arrange given numbers to form the biggest no:- 

	- Store no in string array
	- Compare string by Ascii char value in lexicographical order
	
	- Ready made method to compare string is strcmp & string class's method compare

13 Find Triplet for given sum:- - Sort array, iterate with three indexes, left, right & 0 to N

14 Trapping Rain Water:- 

	- Pre-compute highest bar on left and right of every bar in O(n) time. Then use pre-computed values to find the amount of water in every element. 
	- Time complexity of this solution is O(n).


15 Minimum Length Unsorted Sub-array:-

	1) Find the candidate unsorted subarray
		a) Scan from left to right and find the first element which is greater than the next element. Let s be the index of such an element.
		b) Scan from right to left and find the first element (first in right to left order) which is smaller than the next element (next in right to left order). Let e be the index of such an element
	
	2) Check whether sorting the candidate unsorted subarray makes the complete array sorted or not. If not, then include more elements in the subarray.
		a) Find the minimum and maximum values in arr[s..e]. Let minimum and maximum values be min and max.
		b) Find the first element (if there is any) in arr[0..s-1] which is greater than min, change s to index of this element.
		c) Find the last element (if there is any) in arr[e+1..n-1] which is smaller than max, change e to index of this element.
	
	3) Print s and e.

16 Largest Sub-Array with Equal no of 1s & 0s:-

	1) Consider all 0 values as -1. The problem now reduces to find out the maximum length subarray with sum = 0.
	2) Create a temporary array sumleft[] of size n. Store the sum of all elements from arr[0] to arr[i] in sumleft[i]. This can be done in O(n) time.
	3) There are two cases, the output subarray may start from 0th index or may start from some other index. We will return the max of the values obtained by two cases.
	4) To find the maximum length subarray starting from 0th index, scan the sumleft[] and find the maximum i where sumleft[i] = 0.
	5) Now, we need to find the subarray where subarray sum is 0 and start index is not 0. This problem is equivalent to finding two indexes i & j in sumleft[] such that sumleft[i] = sumleft[j] and j-i is maximum. To solve this, we can create a hash table with size = max-min+1 where min is the minimum value in the sumleft[] and max is the maximum value in the sumleft[]. The idea is to hash the leftmost occurrences of all different values in sumleft[]. The size of hash is chosen as max-min+1 because there can be these many different possible values in sumleft[]. Initialize all values in hash as -1
	6) To fill and use hash[], traverse sumleft[] from 0 to n-1. If a value is not present in hash[], then store its index in hash. If the value is present, then calculate the difference of current index of sumleft[] and previously stored value in hash[]. If this difference is more than maxsize, then update the maxsize.
	7) To handle corner cases (all 1s and all 0s), we initialize maxsize as -1. If the maxsize remains -1, then print there is no such subarray.


17 Print all distinct permutations of a given string:-

    1. Find the largest index k such that a[k] < a[k + 1]. If no such index exists, the permutation is the last permutation.
    2. Find the largest index l greater than k such that a[k] < a[l].
    3. Swap the value of a[k] with that of a[l].
    4. Reverse the sequence from a[k + 1] up to and including the final element a[n].

